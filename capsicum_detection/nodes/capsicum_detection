#!/usr/bin/env python3
import rospy
import os
import sys
import random
import math
import numpy as np
import skimage.io
import matplotlib
import matplotlib.pyplot as plt


from capsicum_detection import utils
from capsicum_detection import model as modellib
from capsicum_detection import visualize
from capsicum_detection import capsicum
from capsicum_detection.msg import Result
import cv2


sys.path.remove('/opt/ros/kinetic/lib/python2.7/dist-packages')
DATA_ROOT_DIR = os.path.abspath("/home/padmaja/Downloads/software/Mask_RCNN")
#sys.path.append(ROOT_DIR)  # To find local version of the library
#sys.path.append(os.path.join(ROOT_DIR, "samples/capsicum/"))  # To find local version

# Directory to save logs and trained model
MODEL_DIR = os.path.join(DATA_ROOT_DIR, "logs")
# Local path to trained weights file
CAPSICUM_MODEL_PATH = os.path.join(DATA_ROOT_DIR, "mask_rcnn_capsicum_latest.h5")

# Directory of images to run detection on
IMAGE_DIR = os.path.join(DATA_ROOT_DIR, "datasets/capsicum/test")
CLASS_NAMES = ['BG', 'capsicum']

class InferenceConfig(capsicum.CapsicumConfig):
    # Set batch size to 1 since we'll be running inference on
    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1

class MaskRCNNNode(object):
    def __init__(self):
        
        config = InferenceConfig()
        config.display()
        # Create model object in inference mode.
        self._model = modellib.MaskRCNN(mode="inference", model_dir=MODEL_DIR, config=config)
    	# Load weights trained on MS-COCO
        self._model.load_weights(CAPSICUM_MODEL_PATH, by_name=True)	
        self._class_names =  CLASS_NAMES
        self._publish_rate = rospy.get_param('~publish_rate', 10)
        rate = rospy.Rate(self._publish_rate)

    def run(self):
        # Run detection
        '''
        fake run detection on a directory
        '''
        file_names = next(os.walk(IMAGE_DIR))[2]
        for i in range(4):
            name = file_names[i]
            print(name)
            image = skimage.io.imread(os.path.join(IMAGE_DIR, name))
            # Run detection
            results = self._model.detect([image], verbose=1)
            # Visualize results
            r = results[0]
            visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], 
                                        self._class_names, r['scores'])

def main():
    rospy.init_node('mask_rcnn')
    node = MaskRCNNNode()
    node.run()

if __name__ == '__main__':
    main()
